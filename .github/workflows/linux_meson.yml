name: Linux Meson tests

# This is a single job: Python 3.9, building with Meson, using -Werror to
# ensure we remain at zero build warnings. Other Meson CI jobs are running
# on https://github.com/rgommers/scipy/tree/meson

on:
  push:
    branches:
      - main
      - maintenance/**
  pull_request:
    branches:
      - main
      - maintenance/**

env:
  CCACHE_DIR: "${{ github.workspace }}/.ccache"
  INSTALLDIR: "build-install"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test_meson:
    name: Meson build
    # If using act to run CI locally the github object does not exist and the usual skipping should not be enforced
    if: "github.repository == 'scipy/scipy' || github.repository == ''"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Ubuntu dependencies
      run: |
        # NOTE: not the same OpenBLAS version as in upstream CI (I'm being lazy here)
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

    - name: Caching Python dependencies
      uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip

    - name: Install Python packages
      run: |
        python -m pip install numpy setuptools wheel cython pytest pytest-xdist pybind11 mpmath gmpy2 pythran ninja meson==0.60.3

    - name:  Prepare compiler cache
      id:    prep-ccache
      shell: bash
      run: |
        mkdir -p "${CCACHE_DIR}"
        echo "::set-output name=dir::$CCACHE_DIR"
        NOW=$(date -u +"%F-%T")
        echo "::set-output name=timestamp::${NOW}"

    - name: Setup compiler cache
      uses:  actions/cache@v3
      id:    cache-ccache
      # Reference: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      # NOTE: The caching strategy is modeled in a way that it will always have a unique cache key for each workflow run
      # (even if the same workflow is run multiple times). The restore keys are not unique and for a partial match, they will
      # return the most recently created cache entry, according to the GitHub Action Docs.
      with:
        path: ${{ steps.prep-ccache.outputs.dir }}
        # Restores ccache from either a previous build on this branch or on main
        key:  ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-${{ steps.prep-ccache.outputs.timestamp }}
        # This evaluates to `Linux Tests-3.9-ccache-linux-` which is not unique. As the CI matrix is expanded, this will
        # need to be updated to be unique so that the cache is not restored from a different job altogether.
        restore-keys: |
          ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-

    - name: Setup build and install scipy
      run: |
        python dev.py -j 2 --build-only --werror

    - name: Ccache performance
      shell: bash -l {0}
      run: ccache -s

    - name: Check installation
      run: |
        pushd tools
        python check_installation.py ${{ env.INSTALLDIR }}
        popd

    - name: Test SciPy
      run: |
        export OMP_NUM_THREADS=2
        python dev.py -n -j 2

  Linux_Python_38_32bit_full:
    name: Linux Python 3.8 32bit
    # If using act to run CI locally the github object does not exist and the usual skipping should not be enforced
    if: "github.repository == 'anirudhdagar/scipy' || github.repository == '' && github.event_name == 'pull_request'"
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: update and install the building tools
        run: |
          apt-get -y update
          apt-get -y install curl libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev libmpc-dev
          apt-get -y install python3.8-dev python3.8 python3.8-distutils pkg-config
          ls scipy

      - name: Install Python packages
        run: |
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python3.8 get-pip.py
          pip3 --version
          pip3 install setuptools wheel numpy==1.18.5 cython pytest pytest-xdist pybind11 mpmath gmpy2 pythran threadpoolctl ninja meson==0.60.3
          pip3 install matplotlib scikit-umfpack scikit-sparse
          pip3 uninstall -y scipy
          pip3 install pytest-cov coverage codecov gcovr

      - name: Meson 32 build-install
        run: |
          meson --version
          python3 dev.py -j 2 --build-only --gcov

      - name: Test SciPy
        run: |
          export OPENBLAS_NUM_THREADS=1
          python3 dev.py -n -j 2 --mode full --coverage

# set -euo pipefail
# docker pull i386/ubuntu:bionic
# docker run -v $(pwd):/scipy i386/ubuntu:bionic /usr/bin/linux32 /bin/bash -c "cd scipy && \
# apt-get -y update && \
# apt-get -y install curl python3.8-dev python3.8 python3-distutils pkg-config libpng-dev libjpeg8-dev libfreetype6-dev && \
# curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
# python3.8 get-pip.py && \
# pip3 --version && \
# pip3 install setuptools==59.6.0 wheel numpy==1.18.5 cython==0.29.18 pybind11 pytest==7.0.1 pytest-timeout pytest-xdist pytest-env pytest-cov Pillow mpmath pythran==0.10.0 --user && \
# apt-get -y install gcc-5 g++-5 gfortran-8 wget && \
# cd .. && \
# mkdir openblas && cd openblas && \
# target=\$(python3.8 ../scipy/tools/openblas_support.py) && \
# cp -r \$target/lib/* /usr/lib && \
# cp \$target/include/* /usr/include && \
# cd ../scipy && \
# CC=gcc-5 CXX=g++-5 F77=gfortran-8 F90=gfortran-8 pip3 install . && \
# python3.8 tools/openblas_support.py --check_version $(openblas_version) && \
# python3.8 runtests.py -n --mode=full -- -n auto -s --junitxml=junit/test-results.xml --cov-config=.coveragerc --cov-report=xml --cov-report=html"

